# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import webbrowser
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from CA_install import *
from mitm_start import *
from jdsd_main import *
from mail import *
from image import *
import datetime
import multiprocessing
class MyThread(QThread):
    signal_label=pyqtSignal(str)
    signal_p=pyqtSignal(int)
    def __init__(self,mail_line):
        super(MyThread, self).__init__()
        self.mail_line=mail_line
    def __del__(self):
        self.wait()
    def run(self):
        global index
        if progress[index].is_alive():
               progress[index].terminate()
               progress[index].join()
               index=index+1
        begin=time.time()
        while(1):
                ret=os.system("ping baidu.com -n 1")
                if ret==0:
                        break
                else :
                        self.signal_label.emit("正在等待网络连接......")
                        time.sleep(1)
                        error=time.time()
                        if(error-begin>60):
                                self.signal_label.emit("错误!请检查您的网络连接！")
                                return
        ##邮箱判断
        mail=mail_judge()
        if mail=="":
                if self.mail_line=="":
                        self.signal_label.emit("错误!请输入您的邮箱！")   
                        return
                if check(self.mail_line)==0:
                        self.signal_label.emit("错误!请检查你的邮箱格式！")   
                        return
                mail_insert(self.mail_line)
        if mail!=self.mail_line:
                if check(self.mail_line)==0:
                        self.signal_label.emit("错误!请检查你的邮箱格式!")   
                        return
        if mitm_install()==0:
                if not is_admin():
                        self.signal_label.emit("证书未安装！请用管理员模式打开程序✅")   
                        return
                else:
                        self.signal_label.emit("正在下载证书......")
                        progress[index].start()
                        time.sleep(3)
                        progress[index].terminate()
                        progress[index].join()
                        index=index+1
                        path=CA_down()
                        self.signal_p.emit(1)
                        subprocess.call(["certutil", "-addstore","root",path])

        if mitm_install()==0:
                self.signal_label.emit("证书安装失败")     
                self.signal_p.emit(0)     
                return

        self.signal_label.emit("证书已安装✅") 
        self.signal_p.emit(2) 
        time.sleep(2)

        info_user,info_key=user_key_judge()

        if info_user=="" or info_key=="":
                begin=time.time()
                set_proxy()
                progress[index].start()
                end=time.time()
                self.signal_label.emit("请在一分钟内打开登录过的经典诵读......")        
                while end-begin<60:
                        time.sleep(1)
                        end=time.time()
                        info_user,info_key=user_key_judge()     
                        if info_user!="" or info_key!="":
                                self.signal_label.emit("key值获取完毕✅") 
                                self.signal_p.emit(3)
                                time.sleep(2)                     
                                progress[index].terminate()
                                progress[index].join()
                                close_proxy()
                                break
                if end-begin>60:
                        self.signal_label.emit("未打开经典诵读！请按重新开始！") 
                        progress[index].terminate()
                        progress[index].join()
                        close_proxy()
                index=index+1
        if info_user!="" or info_key!="":
                mail=mail_judge()
                self.signal_label.emit("正在为您每日诵读......")
                self.signal_p.emit(4)
                end,key_sucess=open_jdsd(mail,info_user,info_key)
                close_proxy()
                if key_sucess==1:
                        today=datetime.date.today()
                        day_insert(str(today))
                        self.signal_label.emit(end)
                        self.signal_p.emit(5)
                        time.sleep(3)
                        if count_judge()!=0 and count_judge()%10==0:
                                self.signal_label.emit("已经运行了{}次,点点赞助吧~~~".format(count_judge()))
                                QDesktopServices.openUrl(QUrl("https://www.hugcode.cc/sponsor/"))
                                time.sleep(3)      
                        count_increase()
                        app.exit()     
                else:
                        self.signal_label.emit("登录失败!请重新点击开始获取key值")
                        user_key_insert("","")
                        return

 
class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(974, 784)
        Dialog.setStyleSheet("border-radius: 30px;")
        Dialog.setAttribute(Qt.WA_TranslucentBackground)  # 窗体背景透明
        Dialog.setWindowFlags( Qt.FramelessWindowHint|Qt.WindowStaysOnTopHint )  #窗口置顶，无边框，在任务栏不显示图标
        Dialog.setWindowIcon(QIcon(':/nupu.jpg'))
        self.frame = QtWidgets.QFrame(Dialog)
        self.frame.setGeometry(QtCore.QRect(160, 220, 661, 381))
        self.frame.setStyleSheet("background-color: rgb(175,238,238);\n"
"border-radius: 30px;")


        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(290, 10, 100, 100))
        self.label.setStyleSheet('border-radius: {}px;'.format(self.label.width()//2))
        self.label.setFixedSize(self.label.width(), self.label.width())
        pixmap=QIcon(":/ava.png").pixmap(100,100)
        # 创建一个新的 QPixmap，将其大小设置为圆形的大小
        circle_pixmap = QPixmap(pixmap.size())
        circle_pixmap.fill(Qt.transparent)  # 将 QPixmap 的背景设置为透明
        # 创建一个 QPainter 对象，用于绘制圆形
        painter = QPainter(circle_pixmap)
        painter.setRenderHint(QPainter.Antialiasing)  # 启用反锯齿
        painter.setBrush(QBrush(pixmap))  # 将绘制的圆形的填充颜色设置为原始 QPixmap
        painter.drawEllipse(circle_pixmap.rect())  # 在 QPixmap 上绘制一个圆形
        painter.end()  # 结束绘制操作

        self.label.setPixmap(circle_pixmap)

        self.label.setText("")
        self.label.setObjectName("label")
        self.label_4 = QtWidgets.QLabel(self.frame)
        self.label_4.setGeometry(QtCore.QRect(280, 110, 111, 41))
        self.label_4.setStyleSheet("font: 12pt \"华文中宋\";")
        self.label_4.setObjectName("label_4")
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setGeometry(QtCore.QRect(290, 150, 31, 31))
        self.pushButton.setStyleSheet("border-radius:12px;")
        self.pushButton.setIcon(QIcon(":/github.png"))
        self.pushButton.setText("")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.frame)
        self.pushButton_2.setGeometry(QtCore.QRect(350, 150, 31, 31))
        self.pushButton_2.setStyleSheet("border-radius:12px;")
        self.pushButton_2.setIcon(QIcon(":/gitee.png"))
        self.pushButton_2.setText("")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.frame)
        self.pushButton_3.setGeometry(QtCore.QRect(610, 0, 51, 41))
        self.pushButton_3.setStyleSheet("QPushButton{border-radius:20px;  \n}"
"QPushButton:hover { /* 鼠标悬浮在QLineEdit时的状态 */\n"
"    background-color: #B22222;\n"
"    color: #298DFF;\n"
"    selection-background-color: #298DFF;\n"
"    selection-color: #F2F2F2;\n"
"}\n"
)
        self.pushButton_3.setObjectName("pushButton_3")
        self.progressBar = QtWidgets.QProgressBar(self.frame)
        self.progressBar.setGeometry(QtCore.QRect(40, 300, 591, 20))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(200, 190, 281, 31))
        self.label_2.setStyleSheet("font: 11pt \"华文中宋\";")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setGeometry(QtCore.QRect(10, 0, 140, 21))
        self.label_3.setStyleSheet("font: 9pt \"方正粗黑宋简体\";\n"
"background-color: rgb(85, 170, 255);\n"
"border-radius: 10px;")
        self.label_3.setObjectName("label_3")
        self.lineEdit = QtWidgets.QLineEdit(self.frame)
        self.lineEdit.setGeometry(QtCore.QRect(260, 230, 151, 20))
        self.lineEdit.setStyleSheet("* {\n"
"    outline: none;\n"
"}\n"
"\n"
"QDialog {\n"
"    background: #D6DBE9;\n"
"}\n"
"\n"
"QLineEdit {\n"
"    border: 1px solid #A0A0A0; /* 边框宽度为1px，颜色为#A0A0A0 */\n"
"    border-radius: 3px; /* 边框圆角 */\n"
"    padding-left: 5px; /* 文本距离左边界有5px */\n"
"    background-color: #F2F2F2; /* 背景颜色 */\n"
"    color: #000000; /* 文本颜色 */\n"
"    selection-background-color: #A0A0A0; /* 选中文本的背景颜色 */\n"
"    selection-color: #F2F2F2; /* 选中文本的颜色 */\n"
"    font-family: \"Microsoft YaHei\"; /* 文本字体族 */\n"
"    font-size: 10pt; /* 文本字体大小 */\n"
"}\n"
"\n"
"QLineEdit:hover { /* 鼠标悬浮在QLineEdit时的状态 */\n"
"    border: 1px solid #298DFF;\n"
"    border-radius: 3px;\n"
"    background-color: #F2F2F2;\n"
"    color: #298DFF;\n"
"    selection-background-color: #298DFF;\n"
"    selection-color: #F2F2F2;\n"
"}\n"
"\n"
"QLineEdit[echoMode=\"2\"] { /* QLineEdit有输入掩码时的状态 */\n"
"    lineedit-password-character: 9679;\n"
"    lineedit-password-mask-delay: 2000;\n"
"}\n"
"\n"
"QLineEdit:disabled { /* QLineEdit在禁用时的状态 */\n"
"    border: 1px solid #CDCDCD;\n"
"    background-color: #CDCDCD;\n"
"    color: #B4B4B4;\n"
"}\n"
"\n"
"QLineEdit:read-only { /* QLineEdit在只读时的状态 */\n"
"    background-color: #CDCDCD;\n"
"    color: #F2F2F2;\n"
"}\n"
"")
        mail=mail_judge()
        self.lineEdit.setText(mail)
        self.lineEdit.setObjectName("lineEdit")
        self.label_5 = QtWidgets.QLabel(self.frame)
        self.label_5.setGeometry(QtCore.QRect(170, 360, 341, 21))  
        self.label_5.setStyleSheet("font: 10pt \"方正粗黑宋简体\";\n"
"background-color: rgb(0, 170, 127);\n"
"border-radius: 10px;")
        self.label_5.setObjectName("label_5")
        self.pushButton_4 = QtWidgets.QPushButton(self.frame)
        self.pushButton_4.setGeometry(QtCore.QRect(300, 260, 71, 21))
        self.pushButton_4.setStyleSheet("QPushButton {\n"
"    border: 1px solid #A0A0A0; /* 边框宽度为1px，颜色为#A0A0A0 */\n"
"    border-radius: 3px; /* 边框圆角 */\n"
"    background-color: #F0FFFF; /* 背景颜色 */\n"
"    color: #000000; /* 文本颜色 */\n"
"    selection-background-color: #A0A0A0; /* 选中文本的背景颜色 */\n"
"    selection-color: #F2F2F2; /* 选中文本的颜色 */\n"
"    font-family: \"Microsoft YaHei\"; /* 文本字体族 */\n"
"    font-size: 10pt; /* 文本字体大小 */\n"
"}\n"
"QPushButton:hover { /* 鼠标悬浮在QLineEdit时的状态 */\n"
"    border: 1px solid #298DFF;\n"
"    border-radius: 3px;\n"
"    background-color: #F2F2F2;\n"
"    color: #298DFF;\n"
"    selection-background-color: #298DFF;\n"
"    selection-color: #F2F2F2;\n"
"}\n")
        self.pushButton_4.setObjectName("pushButton_4")
        self.label_6 = QtWidgets.QLabel(self.frame)
        self.label_6.setAlignment(Qt.AlignCenter)
        self.label_6.setGeometry(QtCore.QRect(90, 320, 500, 20))
        #160, 220, 661, 381
        self.label_6.setStyleSheet("font: 11pt \"Agency FB\";\n"
"font: 12pt \"微软雅黑\";text-align: center")
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.frame.setWhatsThis(_translate("Dialog", "<html><head/><body><p><br/></p></body></html>"))
        self.label_4.setText(_translate("Dialog", "开发作者：三木"))
        self.pushButton_3.setText(_translate("Dialog", "×"))
        self.label_2.setOpenExternalLinks(True)
        self.label_2.setAlignment(Qt.AlignCenter)
        self.label_2.setText('''<a style="font-family: 微软雅黑; color: #0000FF; font-size: 10pt;  text-decoration: none" href="http://www.hugcode.cc/"> 👉个人博客👈  </a>''')
        self.label_3.setOpenExternalLinks(True)
        self.label_3.setText('''<a style="font-family: 微软雅黑; color: #000000; font-size: 10pt;  text-decoration: none" href="https://www.hugcode.cc/post/j1205dsd.html">👉使用教程&问题反馈</a>''')
        self.label_5.setOpenExternalLinks(True)
        self.label_5.setText('''<a style="font-family: 微软雅黑; color: #0000FF; font-size: 10pt;  text-decoration: none" href="https://www.hugcode.cc/sponsor/"> 如果你觉得本软件好用，可以点击这里支持作者~💰💰💰 https://www.hugcode.cc/sponsor/</a>''')
        self.pushButton_4.setText(_translate("Dialog", "开始"))
        self.pushButton.clicked.connect(self.github)
        self.pushButton_2.clicked.connect(self.gitee)
        self.pushButton_4.clicked.connect(self.start_auto)
        self.lineEdit.setPlaceholderText("请输入你的邮箱(必填)")
        self.pushButton_3.clicked.connect(self.close)
        if count_judge()==0:
                count_increase()
                QDesktopServices.openUrl(QUrl("https://www.hugcode.cc/post/j1205dsd.html"))
        self.progressBar.setRange(0, 5)
        info_user,info_key=user_key_judge()
        info_mail=mail_judge()
        if info_user !="" and info_key!= "" and info_mail!="":
                self.start_auto()

    def github(self):
        webbrowser.open('https://github.com/Gomorebug/auto-jdsd', new=2)
    def gitee(self):
        webbrowser.open('https://gitee.com/Gomorebug')
    def close(self):
        global index
        if progress[index].is_alive():
                progress[index].terminate()
                progress[index].join()
        close_proxy()
        app.quit()
    def start_auto(self):
        # 创建线程
        mail_line=self.lineEdit.text()
        self.thread = MyThread(mail_line)
        # 连接信号
        self.thread.signal_label.connect(self.call_backlabel)  # 进程连接回传到GUI的事件
        self.thread.signal_p.connect(self.call_backprogress)
        # 开始线程
        self.thread.start()
    def call_backlabel(self, msg):
        self.label_6.setText(msg)  # 将线程的参数传入进度条
    def call_backprogress(self,msg):
        self.progressBar.setValue(msg)

if __name__ == '__main__':
        if not os.path.exists(user_path):     
                init_db()
        day=datetime.date.today()
        if(str(day)==day_judge()):
               sys.exit()
        multiprocessing.freeze_support()
        progress=[]
        for i in range(20):
                mitm=multiprocessing.Process(target=start_mitm)
                progress.append(mitm)
        index=0
        # # progress=multiprocessing.Process(target=start_mitm)
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_Dialog()
        ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())